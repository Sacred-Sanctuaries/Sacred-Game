import "./chunk-J24EG3OZ.js";

// node_modules/@directus/sdk/dist/chunk-IKZBOPD7.js
var g = (e) => ({ url: new URL(e), with(t) {
  return { ...this, ...t(this) };
} });
var h = async (e, t, r) => {
  t.headers = typeof t.headers == "object" && !Array.isArray(t.headers) ? t.headers : {};
  let a = r ?? ((s) => typeof s == "object" && s && "data" in s ? s.data : s), m2 = await globalThis.fetch(e, t).then(async (s) => {
    var _a;
    let i = (_a = s.headers.get("Content-Type")) == null ? void 0 : _a.toLowerCase();
    if (i == null ? void 0 : i.startsWith("application/json")) {
      let c = await s.json();
      if (!s.ok)
        throw c;
      return c;
    }
    if ((i == null ? void 0 : i.startsWith("text/html")) || (i == null ? void 0 : i.startsWith("text/plain"))) {
      let c = await s.text();
      if (!s.ok)
        throw c;
      return c;
    }
  }).catch((s) => {
    throw s;
  });
  return a(m2);
};
var E = () => (e) => ({ async query(t, r, o = "items") {
  let a = { method: "POST", body: JSON.stringify({ query: t, variables: r }) }, m2 = {};
  if ("getToken" in this) {
    let c = await this.getToken();
    c && (m2.Authorization = `Bearer ${c}`);
  }
  "Content-Type" in m2 || (m2["Content-Type"] = "application/json"), a.headers = m2;
  let s = o === "items" ? "/graphql" : "/graphql/system", i = u(e.url, s);
  return await h(i.toString(), a);
} });
var k = (e, t, r = {}) => () => {
  let o = r.provider ? `/auth/login/${r.provider}` : "/auth/login", a = { email: e, password: t };
  return "otp" in r && (a.otp = r.otp), "mode" in r && (a.mode = r.mode), { path: o, method: "POST", body: JSON.stringify(a) };
};
var J = (e) => () => ({ path: "/auth/logout", method: "POST", body: JSON.stringify({ refresh_token: e }) });
var G = (e, t) => () => ({ path: "/auth/password/request", method: "POST", body: JSON.stringify({ email: e, ...t ? { reset_url: t } : {} }) });
var _ = (e, t) => () => ({ path: "/auth/password/reset", method: "POST", body: JSON.stringify({ token: e, password: t }) });
var H = () => () => ({ path: "/auth", method: "GET" });
var M = (e, t = "json") => () => ({ path: "/auth/refresh", method: "POST", body: JSON.stringify({ refresh_token: e, ...t ? { mode: t } : {} }) });
var te = (e, t) => () => ({ path: "/activity/comment", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var oe = (e, t) => () => ({ path: "/collections", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var ae = (e, t) => () => ({ path: "/dashboards", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var me = (e, t) => () => ({ path: "/dashboards", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var ie = (e, t, r) => () => ({ path: `/fields/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "POST" });
var pe = (e, t) => () => ({ path: "/files", method: "POST", body: e, params: t ?? {}, headers: { "Content-Type": "multipart/form-data" } });
var de = (e, t = {}, r) => () => ({ path: "/files/import", method: "POST", body: JSON.stringify({ url: e, data: t }), params: r ?? {} });
var ue = (e, t) => () => ({ path: "/flows", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var ye = (e, t) => () => ({ path: "/flows", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var le = (e, t) => () => ({ path: "/folders", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var xe = (e, t) => () => ({ path: "/folders", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Qe = (e, t, r) => () => {
  let o = String(e);
  if (o.startsWith("directus_"))
    throw new Error("Cannot use createItems for core collections");
  return { path: `/items/${o}`, params: r ?? {}, body: JSON.stringify(t), method: "POST" };
};
var Te = (e, t, r) => () => {
  let o = String(e);
  if (o.startsWith("directus_"))
    throw new Error("Cannot use createItem for core collections");
  return { path: `/items/${o}`, params: r ?? {}, body: JSON.stringify(t), method: "POST" };
};
var be = (e, t) => () => ({ path: "/notifications", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Ce = (e, t) => () => ({ path: "/notifications", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var De = (e, t) => () => ({ path: "/operations", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Oe = (e, t) => () => ({ path: "/operations", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Pe = (e, t) => () => ({ path: "/panels", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Fe = (e, t) => () => ({ path: "/panels", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Ie = (e, t) => () => ({ path: "/permissions", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Ee = (e, t) => () => ({ path: "/permissions", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var we = (e, t) => () => ({ path: "/presets", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var ve = (e, t) => () => ({ path: "/presets", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Ue = (e) => () => ({ path: "/relations", body: JSON.stringify(e), method: "POST" });
var $e = (e, t) => () => ({ path: "/roles", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Ge = (e, t) => () => ({ path: "/roles", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var _e = (e, t) => () => ({ path: "/shares", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Le = (e, t) => () => ({ path: "/shares", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Be = (e, t) => () => ({ path: "/translations", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Me = (e, t) => () => ({ path: "/translations", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var ze = (e, t) => () => ({ path: "/users", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Ve = (e, t) => () => ({ path: "/users", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Ke = (e, t) => () => ({ path: "/webhooks", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Ye = (e, t) => () => ({ path: "/webhooks", params: t ?? {}, body: JSON.stringify(e), method: "POST" });
var Tt = (e) => () => ({ path: `/activity/comment/${e}`, method: "DELETE" });
var bt = (e) => () => ({ path: `/collections/${e}`, method: "DELETE" });
var Rt = (e) => () => ({ path: "/dashboards", body: JSON.stringify(e), method: "DELETE" });
var Dt = (e) => () => ({ path: `/dashboards/${e}`, method: "DELETE" });
var gt = (e, t) => () => ({ path: `/fields/${e}/${t}`, method: "DELETE" });
var Ft = (e) => () => ({ path: "/files", body: JSON.stringify(e), method: "DELETE" });
var At = (e) => () => ({ path: `/files/${e}`, method: "DELETE" });
var Et = (e) => () => ({ path: "/flows", body: JSON.stringify(e), method: "DELETE" });
var Nt = (e) => () => ({ path: `/flows/${e}`, method: "DELETE" });
var vt = (e) => () => ({ path: "/folders", body: JSON.stringify(e), method: "DELETE" });
var kt = (e) => () => ({ path: `/folders/${e}`, method: "DELETE" });
var Jt = (e, t) => () => {
  let r = String(e);
  if (r.startsWith("directus_"))
    throw new Error("Cannot use deleteItems for core collections");
  return { path: `/items/${r}`, body: JSON.stringify(Array.isArray(t) ? { keys: t } : { query: t }), method: "DELETE" };
};
var $t = (e, t) => () => {
  let r = String(e);
  if (r.startsWith("directus_"))
    throw new Error("Cannot use deleteItem for core collections");
  return { path: `/items/${r}/${t}`, method: "DELETE" };
};
var Wt = (e) => () => ({ path: "/notifications", body: JSON.stringify(e), method: "DELETE" });
var _t = (e) => () => ({ path: `/notifications/${e}`, method: "DELETE" });
var Ht = (e) => () => ({ path: "/operations", body: JSON.stringify(e), method: "DELETE" });
var Bt = (e) => () => ({ path: `/operations/${e}`, method: "DELETE" });
var qt = (e) => () => ({ path: "/panels", body: JSON.stringify(e), method: "DELETE" });
var zt = (e) => () => ({ path: `/panels/${e}`, method: "DELETE" });
var Xt = (e) => () => ({ path: "/permissions", body: JSON.stringify(e), method: "DELETE" });
var Kt = (e) => () => ({ path: `/permissions/${e}`, method: "DELETE" });
var Zt = (e) => () => ({ path: "/presets", body: JSON.stringify(e), method: "DELETE" });
var er = (e) => () => ({ path: `/presets/${e}`, method: "DELETE" });
var rr = (e, t) => () => ({ path: `/relations/${e}/${t}`, method: "DELETE" });
var sr = (e) => () => ({ path: "/roles", body: JSON.stringify(e), method: "DELETE" });
var ar = (e) => () => ({ path: `/roles/${e}`, method: "DELETE" });
var cr = (e) => () => ({ path: "/shares", body: JSON.stringify(e), method: "DELETE" });
var ir = (e) => () => ({ path: `/shares/${e}`, method: "DELETE" });
var pr = (e) => () => ({ path: "/translations", body: JSON.stringify(e), method: "DELETE" });
var dr = (e) => () => ({ path: `/translations/${e}`, method: "DELETE" });
var ur = (e) => () => ({ path: "/users", body: JSON.stringify(e), method: "DELETE" });
var yr = (e) => () => ({ path: `/users/${e}`, method: "DELETE" });
var lr = (e) => () => ({ path: "/webhooks", body: JSON.stringify(e), method: "DELETE" });
var xr = (e) => () => ({ path: `/webhooks/${e}`, method: "DELETE" });
var $r = (e) => () => ({ path: "/activity", params: e ?? {}, method: "GET" });
var Gr = (e, t) => () => ({ path: `/activity/${e}`, params: t ?? {}, method: "GET" });
var _r = (e, t) => () => {
  let r = e;
  return { path: r.startsWith("directus_") ? `/${r.substring(9)}` : `/items/${r}`, method: "GET", params: { ...t.query ?? {}, ...t.groupBy ? { groupBy: t.groupBy } : {}, aggregate: t.aggregate } };
};
var Hr = () => () => ({ path: "/collections", method: "GET" });
var Br = (e) => () => ({ path: `/collections/${e}`, method: "GET" });
var qr = (e) => () => ({ path: "/dashboards", params: e ?? {}, method: "GET" });
var zr = (e, t) => () => ({ path: `/dashboards/${e}`, params: t ?? {}, method: "GET" });
var Xr = (e) => () => ({ path: `/extensions/${e}`, method: "GET" });
var Yr = () => () => ({ path: "/fields", method: "GET" });
var Zr = (e) => () => ({ path: `/fields/${e}`, method: "GET" });
var eo = (e, t) => () => ({ path: `/fields/${e}/${t}`, method: "GET" });
var ro = (e) => () => ({ path: "/files", params: e ?? {}, method: "GET" });
var oo = (e, t) => () => ({ path: `/files/${e}`, params: t ?? {}, method: "GET" });
var ao = (e) => () => ({ path: "/flows", params: e ?? {}, method: "GET" });
var mo = (e, t) => () => ({ path: `/flows/${e}`, params: t ?? {}, method: "GET" });
var io = (e) => () => ({ path: "/folders", params: e ?? {}, method: "GET" });
var no = (e, t) => () => ({ path: `/folders/${e}`, params: t ?? {}, method: "GET" });
var ho = (e, t) => () => {
  let r = String(e);
  if (r.startsWith("directus_"))
    throw new Error("Cannot use readItems for core collections");
  return { path: `/items/${r}`, params: t ?? {}, method: "GET" };
};
var uo = (e, t, r) => () => {
  let o = String(e);
  if (o.startsWith("directus_"))
    throw new Error("Cannot use readItem for core collections");
  return { path: `/items/${o}/${t}`, params: r ?? {}, method: "GET" };
};
var So = (e) => () => ({ path: "/notifications", params: e ?? {}, method: "GET" });
var lo = (e, t) => () => ({ path: `/notifications/${e}`, params: t ?? {}, method: "GET" });
var fo = (e) => () => ({ path: "/operations", params: e ?? {}, method: "GET" });
var Qo = (e, t) => () => ({ path: `/operations/${e}`, params: t ?? {}, method: "GET" });
var jo = (e) => () => ({ path: "/panels", params: e ?? {}, method: "GET" });
var bo = (e, t) => () => ({ path: `/panels/${e}`, params: t ?? {}, method: "GET" });
var Ro = (e) => () => ({ path: "/permissions", params: e ?? {}, method: "GET" });
var Do = (e, t) => () => ({ path: `/permissions/${e}`, params: t ?? {}, method: "GET" });
var go = (e) => () => ({ path: "/presets", params: e ?? {}, method: "GET" });
var Po = (e, t) => () => ({ path: `/presets/${e}`, params: t ?? {}, method: "GET" });
var Ao = () => () => ({ path: "/relations", method: "GET" });
var Io = (e) => () => ({ path: `/relations/${e}`, method: "GET" });
var Eo = (e, t) => () => ({ path: `/relations/${e}/${t}`, method: "GET" });
var wo = (e) => () => ({ path: "/revisions", params: e ?? {}, method: "GET" });
var vo = (e, t) => () => ({ path: `/revisions/${e}`, params: t ?? {}, method: "GET" });
var Uo = (e) => () => ({ path: "/roles", params: e ?? {}, method: "GET" });
var Jo = (e, t) => () => ({ path: `/roles/${e}`, params: t ?? {}, method: "GET" });
var Go = (e) => () => ({ path: "/settings", params: e ?? {}, method: "GET" });
var _o = (e) => () => ({ path: "/shares", params: e ?? {}, method: "GET" });
var Lo = (e, t) => () => ({ path: `/shares/${e}`, params: t ?? {}, method: "GET" });
var Bo = (e, t) => () => {
  let r = String(e);
  if (r.startsWith("directus_"))
    throw new Error("Cannot use readSingleton for core collections");
  return { path: `/items/${r}`, params: t ?? {}, method: "GET" };
};
var qo = (e) => () => ({ path: "/translations", params: e ?? {}, method: "GET" });
var zo = (e, t) => () => ({ path: `/translations/${e}`, params: t ?? {}, method: "GET" });
var Xo = (e) => () => ({ path: "/users", params: e ?? {}, method: "GET" });
var Ko = (e, t) => () => ({ path: `/users/${e}`, params: t ?? {}, method: "GET" });
var Yo = (e) => () => ({ path: "/users/me", params: e ?? {}, method: "GET" });
var es = (e) => () => ({ path: "/webhooks", params: e ?? {}, method: "GET" });
var ts = (e, t) => () => ({ path: `/webhooks/${e}`, params: t ?? {}, method: "GET" });
var Ps = (e) => () => ({ method: "POST", path: "/schema/apply", body: JSON.stringify(e) });
var As = (e, t = false) => () => ({ method: "POST", path: "/schema/diff", params: t ? { force: t } : {}, body: JSON.stringify(e) });
var Es = () => () => ({ method: "GET", path: "/schema/snapshot" });
var Js = (e = "item") => () => ({ method: "GET", path: e === "item" ? "/server/specs/graphql" : "/server/specs/graphql/system" });
var Gs = () => () => ({ method: "GET", path: "/server/health" });
var _s = () => () => ({ method: "GET", path: "/server/info" });
var Hs = () => () => ({ method: "GET", path: "/server/specs/oas" });
var Ms = () => () => ({ method: "GET", path: "/server/ping" });
var ea = (e, t, r) => () => ({ path: `/activity/comment/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var ra = (e, t, r) => () => ({ path: `/collections/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var sa = (e, t, r) => () => ({ path: "/dashboards", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var aa = (e, t, r) => () => ({ path: `/dashboards/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var ca = (e, t, r, o) => () => ({ path: `/fields/${e}/${t}`, params: o ?? {}, body: JSON.stringify(r), method: "PATCH" });
var na = (e, t, r) => () => ({ path: "/files", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var pa = (e, t, r) => () => ({ path: `/files/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var ha = (e, t, r) => () => ({ path: "/flows", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var ua = (e, t, r) => () => ({ path: `/flows/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var Sa = (e, t, r) => () => ({ path: "/folders", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var la = (e, t, r) => () => ({ path: `/folders/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var fa = (e, t, r, o) => () => ({ path: `/items/${String(e)}`, params: o ?? {}, body: JSON.stringify({ keys: t, data: r }), method: "PATCH" });
var Qa = (e, t, r, o) => () => {
  let a = String(e);
  if (a.startsWith("directus_"))
    throw new Error("Cannot use updateItem for core collections");
  return { path: `/items/${a}/${t}`, params: o ?? {}, body: JSON.stringify(r), method: "PATCH" };
};
var ja = (e, t, r) => () => ({ path: "/notifications", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var ba = (e, t, r) => () => ({ path: `/notifications/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var Ra = (e, t, r) => () => ({ path: "/operations", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var Da = (e, t, r) => () => ({ path: `/operations/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var ga = (e, t, r) => () => ({ path: "/panels", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var Pa = (e, t, r) => () => ({ path: `/panels/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var Aa = (e, t, r) => () => ({ path: "/permissions", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var Ia = (e, t, r) => () => ({ path: `/permissions/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var Na = (e, t, r) => () => ({ path: "/presets", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var wa = (e, t, r) => () => ({ path: `/presets/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var ka = (e, t, r, o) => () => ({ path: `/relations/${e}/${t}`, params: o ?? {}, body: JSON.stringify(r), method: "PATCH" });
var Ja = (e, t, r) => () => ({ path: "/roles", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var $a = (e, t, r) => () => ({ path: `/roles/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var Wa = (e, t) => () => ({ path: "/settings", params: t ?? {}, body: JSON.stringify(e), method: "PATCH" });
var La = (e, t, r) => () => ({ path: "/shares", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var Ha = (e, t, r) => () => ({ path: `/shares/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var Ma = (e, t, r) => () => {
  let o = String(e);
  if (o.startsWith("directus_"))
    throw new Error("Cannot use updateSingleton for core collections");
  return { path: `/items/${o}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" };
};
var za = (e, t, r) => () => ({ path: "/translations", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var Va = (e, t, r) => () => ({ path: `/translations/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var Ka = (e, t, r) => () => ({ path: "/users", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var Ya = (e, t, r) => () => ({ path: `/users/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var Za = (e, t) => () => ({ path: "/users/me", params: t ?? {}, body: JSON.stringify(e), method: "PATCH" });
var tm = (e, t, r) => () => ({ path: "/webhooks", params: r ?? {}, body: JSON.stringify({ keys: e, data: t }), method: "PATCH" });
var rm = (e, t, r) => () => ({ path: `/webhooks/${e}`, params: r ?? {}, body: JSON.stringify(t), method: "PATCH" });
var Om = () => () => ({ method: "POST", path: "/utils/cache/clear" });
var Pm = (e, t, r, o) => () => ({ method: "POST", path: `/utils/export/${e}`, body: JSON.stringify({ format: t, query: r, file: o }) });
var Am = (e, t, r) => () => e === "GET" ? { path: `/flows/trigger/${t}`, params: r ?? {}, method: "GET" } : { path: `/flows/trigger/${t}`, body: JSON.stringify(r ?? {}), method: "POST" };
var Em = (e) => () => ({ method: "POST", path: "/utils/hash/generate", body: JSON.stringify({ string: e }) });
var Nm = (e, t) => () => ({ method: "POST", path: "/utils/hash/verify", body: JSON.stringify({ string: e, hash: t }) });
var vm = (e, t) => () => ({ path: `/utils/import/${e}`, method: "POST", body: t, headers: { "Content-Type": "multipart/form-data" } });
var Um = (e, t) => () => ({ path: `/operations/trigger/${e}`, body: JSON.stringify(t ?? {}), method: "POST" });
var $m = (e, t) => () => ({ path: "/shares/auth", method: "POST", body: JSON.stringify({ share: e, password: t }) });
var Gm = (e, t) => () => ({ path: "/shares/invite", method: "POST", body: JSON.stringify({ share: e, emails: t }) });
var Wm = (e) => () => ({ path: `/shares/info/${e}`, method: "GET" });
var Lm = (e, t, r) => () => ({ method: "POST", path: `/utils/sort/${e}`, body: JSON.stringify({ item: t, to: r }) });
var Bm = (e, t, r) => () => ({ path: "/users/invite", method: "POST", body: JSON.stringify({ email: e, role: t, ...r ? { invite_url: r } : {} }) });
var Mm = (e, t) => () => ({ path: "/users/invite/accept", method: "POST", body: JSON.stringify({ token: e, password: t }) });
var qm = (e) => () => ({ path: "/users/me/tfa/generate", method: "POST", body: JSON.stringify({ password: e }) });
var zm = (e, t) => () => ({ path: "/users/me/tfa/enable", method: "POST", body: JSON.stringify({ secret: e, otp: t }) });
var Vm = (e) => () => ({ path: "/users/me/tfa/disable", method: "POST", body: JSON.stringify({ otp: e }) });
var fc = (e = {}) => (t) => ({ async request(r) {
  let o = r();
  if (o.headers || (o.headers = {}), "Content-Type" in o.headers ? o.headers["Content-Type"] === "multipart/form-data" && delete o.headers["Content-Type"] : o.headers["Content-Type"] = "application/json", "getToken" in this) {
    let c = await this.getToken();
    c && (o.headers || (o.headers = {}), o.headers.Authorization = `Bearer ${c}`);
  }
  let a = u(t.url, o.path, o.params), m2 = { method: o.method ?? "GET", headers: o.headers ?? {} };
  o.body && (m2.body = o.body), o.onRequest && (m2 = await o.onRequest(m2)), e.onRequest && (m2 = await e.onRequest(m2));
  let s;
  return e.onResponse && o.onResponse ? s = (c) => Promise.resolve(c).then(e.onResponse).then(o.onResponse) : "onResponse" in o ? s = o.onResponse : "onResponse" in e && (s = e.onResponse), await h(a.toString(), m2, s);
} });
var R = (e) => {
  let t = {};
  if (Array.isArray(e.fields) && e.fields.length > 0) {
    let r = (o, a = []) => {
      if (typeof o == "object") {
        let m2 = [];
        for (let s in o) {
          let i = o[s] ?? [];
          if (Array.isArray(i))
            for (let c of i)
              m2.push(r(c, [...a, s]));
          else if (typeof i == "object")
            for (let c of Object.keys(i)) {
              let S = i[c];
              for (let f of S)
                m2.push(r(f, [...a, `${s}:${c}`]));
            }
        }
        return m2.flatMap((s) => s);
      }
      return [...a, String(o)].join(".");
    };
    t.fields = e.fields.flatMap((o) => r(o)).join(",");
  }
  return e.filter && Object.keys(e.filter).length > 0 && (t.filter = JSON.stringify(e.filter)), e.search && (t.search = e.search), "sort" in e && e.sort && (t.sort = typeof e.sort == "string" ? e.sort : e.sort.join(",")), typeof e.limit == "number" && e.limit >= -1 && (t.limit = String(e.limit)), typeof e.offset == "number" && e.offset >= 0 && (t.offset = String(e.offset)), typeof e.page == "number" && e.page >= 1 && (t.page = String(e.page)), e.deep && Object.keys(e.deep).length > 0 && (t.deep = JSON.stringify(e.deep)), e.alias && Object.keys(e.alias).length > 0 && (t.alias = JSON.stringify(e.alias)), e.aggregate && Object.keys(e.aggregate).length > 0 && (t.aggregate = JSON.stringify(e.aggregate)), e.groupBy && e.groupBy.length > 0 && (t.groupBy = e.groupBy.join(",")), t;
};
function jc(e, t) {
  return () => {
    let r = t();
    return e && (r.headers || (r.headers = {}), r.headers.Authorization = `Bearer ${e}`), r;
  };
}
function Cc(e) {
  return () => {
    let t = e();
    return t.method === "GET" && (t.method = "SEARCH", t.body = JSON.stringify({ query: t.params }), delete t.params), t;
  };
}
var x = "/";
var O = (e, t) => (e.endsWith(x) && (e = e.slice(0, -1)), t.startsWith(x) || (t = x + t), e + t);
var u = (e, t, r) => {
  let o = e.pathname === x ? t : O(e.pathname, t), a = new globalThis.URL(o, e);
  if (r)
    for (let [m2, s] of Object.entries(R(r)))
      if (s && typeof s == "object" && !Array.isArray(s))
        for (let [i, c] of Object.entries(s))
          a.searchParams.set(`${m2}[${i}]`, String(c));
      else
        a.searchParams.set(m2, s);
  return a;
};
var D = () => {
  let e = null;
  return { get: async () => e, set: async (t) => {
    e = t;
  } };
};
var j = { msRefreshBeforeExpires: 3e4, autoRefresh: true };
var yi = (e = "cookie", t = {}) => (r) => {
  t = { ...j, ...t };
  let o = null, a = null, m2 = t.storage ?? D(), s = "autoRefresh" in t ? t.autoRefresh : j.autoRefresh, i = typeof t.msRefreshBeforeExpires == "number" ? t.msRefreshBeforeExpires : j.msRefreshBeforeExpires, c = () => {
    m2.set({ access_token: null, refresh_token: null, expires: null, expires_at: null });
  }, S = async () => {
    try {
      await o;
    } finally {
      o = null;
    }
  }, f = async () => {
    let n = await m2.get();
    if (o || !(n == null ? void 0 : n.expires_at)) {
      await S();
      return;
    }
    n.expires_at < (/* @__PURE__ */ new Date()).getTime() + i && Q().catch((p) => {
    }), await S();
  }, b = (n) => {
    let p = n.expires ?? 0;
    n.expires_at = (/* @__PURE__ */ new Date()).getTime() + p, m2.set(n), s && p > i && p < Number.MAX_SAFE_INTEGER && (a && clearTimeout(a), a = setTimeout(() => {
      a = null, Q().catch((d) => {
      });
    }, p - i));
  }, Q = async () => (o = (async () => {
    let p = await m2.get();
    c();
    let d = { method: "POST", headers: { "Content-Type": "application/json" } };
    e === "json" && (p == null ? void 0 : p.refresh_token) && (d.body = JSON.stringify({ refresh_token: p.refresh_token }));
    let T = u(r.url, "/auth/refresh"), l = await h(T.toString(), d).catch((y2) => {
      throw y2;
    });
    return b(l), l;
  })().catch((p) => {
    throw p;
  }), o);
  return { refresh: Q, async login(n, p, d = {}) {
    c();
    let T = d.provider ? `/auth/login/${d.provider}` : "/auth/login", l = u(r.url, T), y2 = { email: n, password: p };
    "otp" in d && (y2.otp = d.otp), "mode" in d && (y2.mode = d.mode);
    let C = await h(l.toString(), { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(y2) });
    return b(C), C;
  }, async logout() {
    let n = await m2.get(), p = { method: "POST", headers: { "Content-Type": "application/json" } };
    e === "json" && (n == null ? void 0 : n.refresh_token) && (p.body = JSON.stringify({ refresh_token: n.refresh_token }));
    let d = u(r.url, "/auth/logout");
    await h(d.toString(), p, null), a && clearTimeout(a), c();
  }, async getToken() {
    var _a;
    return await f(), ((_a = await m2.get()) == null ? void 0 : _a.access_token) ?? null;
  }, setToken(n) {
    m2.set({ access_token: n, refresh_token: null, expires: null, expires_at: null });
  } };
};
var li = (e) => (t) => {
  let r = e ?? null;
  return { async getToken() {
    return r;
  }, setToken(o) {
    r = o;
  } };
};

// node_modules/@directus/sdk/dist/chunk-2VYDJM4Y.js
function m(t) {
  return JSON.stringify({ ...t, type: "auth" });
}
var w = () => JSON.stringify({ type: "pong" });
var y = (t) => new Promise((u2, r) => {
  let h2 = (S) => {
    try {
      let a = JSON.parse(S.data);
      typeof a == "object" && !Array.isArray(a) && a !== null && (t.removeEventListener("message", h2), u2(a));
    } catch {
      t.removeEventListener("message", h2), u2(S);
    }
  };
  t.addEventListener("message", h2), t.addEventListener("error", () => r()), t.addEventListener("close", () => r());
});
function* g2() {
  let t = 1;
  for (; ; )
    yield String(t), t++;
}
var x2 = { authMode: "handshake", heartbeat: true, reconnect: { delay: 1e3, retries: 10 } };
function j2(t = {}) {
  return (u2) => {
    t = { ...x2, ...t };
    let r = null, h2 = g2(), S = 0, a = false, f = (e) => "getToken" in e, b = async (e, n) => {
      if (t.authMode === "strict" && f(n)) {
        let o = await n.getToken();
        o && e.searchParams.set("access_token", o);
      }
      return e;
    }, v = async (e) => {
      if ("url" in t)
        return await b(new URL(t.url), e);
      if (["ws:", "wss:"].includes(u2.url.protocol))
        return await b(u2.url, e);
      let n = new URL(u2.url.toString());
      return n.protocol = u2.url.protocol === "https:" ? "wss:" : "ws:", n.pathname = "/websocket", await b(n, e);
    }, k2 = () => {
      r = null, h2 = g2();
    };
    function E2() {
      t.reconnect && !a && S < t.reconnect.retries ? (a = true, setTimeout(() => {
        S += 1, this.connect().then(() => {
          S = 0, a = false;
        }).catch(() => {
        });
      }, Math.max(1, t.reconnect.delay))) : a = false;
    }
    let l = { open: /* @__PURE__ */ new Set([]), error: /* @__PURE__ */ new Set([]), close: /* @__PURE__ */ new Set([]), message: /* @__PURE__ */ new Set([]) }, C = async (e, n) => {
      for (; e.readyState !== WebSocket.CLOSED; ) {
        let o = await y(e).catch(() => {
        });
        if (o) {
          if ("type" in o) {
            if (o.type === "auth" && f(n)) {
              let i = await n.getToken();
              if (i) {
                e.send(m({ access_token: i }));
                continue;
              }
            }
            if (t.heartbeat && o.type === "ping") {
              e.send(w());
              continue;
            }
          }
          l.message.forEach((i) => i.call(e, o));
        }
      }
    };
    return { async connect() {
      let e = this, n = await v(e);
      return new Promise((o, i) => {
        let p = false, c = new globalThis.WebSocket(n);
        c.addEventListener("open", async (s) => {
          if (t.authMode === "handshake" && f(e)) {
            let d = await e.getToken();
            d && c.send(m({ access_token: d }));
          }
          p = true, l.open.forEach((d) => d.call(c, s)), C(c, e), o();
        }), c.addEventListener("error", (s) => {
          l.error.forEach((d) => d.call(c, s)), k2(), E2.call(this), p || i(s);
        }), c.addEventListener("close", (s) => {
          l.close.forEach((d) => d.call(c, s)), k2(), E2.call(this), p || i(s);
        }), r = c;
      });
    }, disconnect() {
      r && (r == null ? void 0 : r.readyState) === WebSocket.OPEN && r.close(), r = null;
    }, onWebSocket(e, n) {
      if (e === "message") {
        let o = function(i) {
          if (typeof i.data != "string")
            return n.call(this, i);
          try {
            return n.call(this, JSON.parse(i.data));
          } catch {
            return n.call(this, i);
          }
        };
        return l[e].add(o), () => l[e].delete(o);
      }
      return l[e].add(n), () => l[e].delete(n);
    }, sendMessage(e) {
      if (!r || (r == null ? void 0 : r.readyState) !== WebSocket.OPEN)
        throw new Error("websocket connection not OPEN");
      if (typeof e == "string") {
        r.send(e);
        return;
      }
      "uid" in e || (e.uid = h2.next().value), r == null ? void 0 : r.send(JSON.stringify(e));
    }, async subscribe(e, n = {}) {
      (!r || r.readyState !== WebSocket.OPEN) && await this.connect(), "uid" in n || (n.uid = h2.next().value);
      let o = true, i = r, p = (s) => i.send(JSON.stringify(s));
      p({ ...n, collection: e, type: "subscribe" });
      async function* c() {
        for (; o && r && r.readyState === WebSocket.OPEN; ) {
          let s = await y(r).catch(() => {
          });
          if (s) {
            if ("type" in s && "status" in s && s.type === "subscribe" && s.status === "error")
              throw s;
            "type" in s && "uid" in s && s.type === "subscription" && s.uid === n.uid && (yield s);
          }
        }
        if (t.reconnect && a) {
          for (; a; )
            await W(10);
          r && r.readyState === WebSocket.OPEN && (r.send(JSON.stringify({ ...n, collection: e, type: "subscribe" })), yield* c());
        }
      }
      return { subscription: c(), unsubscribe() {
        p({ uid: n.uid, type: "unsubscribe" }), o = false;
      } };
    } };
  };
}
var W = (t) => new Promise((u2) => setTimeout(() => u2(), t));
export {
  Mm as acceptUserInvite,
  _r as aggregate,
  Cc as asSearch,
  m as auth,
  $m as authenticateShare,
  yi as authentication,
  Om as clearCache,
  oe as createCollection,
  te as createComment,
  me as createDashboard,
  ae as createDashboards,
  g as createDirectus,
  ie as createField,
  ye as createFlow,
  ue as createFlows,
  xe as createFolder,
  le as createFolders,
  Te as createItem,
  Qe as createItems,
  Ce as createNotification,
  be as createNotifications,
  Oe as createOperation,
  De as createOperations,
  Fe as createPanel,
  Pe as createPanels,
  Ee as createPermission,
  Ie as createPermissions,
  ve as createPreset,
  we as createPresets,
  Ue as createRelation,
  Ge as createRole,
  $e as createRoles,
  Le as createShare,
  _e as createShares,
  Me as createTranslation,
  Be as createTranslations,
  Ve as createUser,
  ze as createUsers,
  Ye as createWebhook,
  Ke as createWebhooks,
  bt as deleteCollection,
  Tt as deleteComment,
  Dt as deleteDashboard,
  Rt as deleteDashboards,
  gt as deleteField,
  At as deleteFile,
  Ft as deleteFiles,
  Nt as deleteFlow,
  Et as deleteFlows,
  kt as deleteFolder,
  vt as deleteFolders,
  $t as deleteItem,
  Jt as deleteItems,
  _t as deleteNotification,
  Wt as deleteNotifications,
  Bt as deleteOperation,
  Ht as deleteOperations,
  zt as deletePanel,
  qt as deletePanels,
  Kt as deletePermission,
  Xt as deletePermissions,
  er as deletePreset,
  Zt as deletePresets,
  rr as deleteRelation,
  ar as deleteRole,
  sr as deleteRoles,
  ir as deleteShare,
  cr as deleteShares,
  dr as deleteTranslation,
  pr as deleteTranslations,
  yr as deleteUser,
  ur as deleteUsers,
  xr as deleteWebhook,
  lr as deleteWebhooks,
  Vm as disableTwoFactor,
  zm as enableTwoFactor,
  Em as generateHash,
  qm as generateTwoFactorSecret,
  g2 as generateUid,
  E as graphql,
  de as importFile,
  Gm as inviteShare,
  Bm as inviteUser,
  k as login,
  J as logout,
  D as memoryStorage,
  y as messageCallback,
  G as passwordRequest,
  _ as passwordReset,
  w as pong,
  R as queryToParams,
  $r as readActivities,
  Gr as readActivity,
  Br as readCollection,
  Hr as readCollections,
  zr as readDashboard,
  qr as readDashboards,
  Xr as readExtensions,
  eo as readField,
  Yr as readFields,
  Zr as readFieldsByCollection,
  oo as readFile,
  ro as readFiles,
  mo as readFlow,
  ao as readFlows,
  no as readFolder,
  io as readFolders,
  Js as readGraphqlSdl,
  uo as readItem,
  ho as readItems,
  Yo as readMe,
  lo as readNotification,
  So as readNotifications,
  Hs as readOpenApiSpec,
  Qo as readOperation,
  fo as readOperations,
  bo as readPanel,
  jo as readPanels,
  Do as readPermission,
  Ro as readPermissions,
  Po as readPreset,
  go as readPresets,
  H as readProviders,
  Eo as readRelation,
  Io as readRelationByCollection,
  Ao as readRelations,
  vo as readRevision,
  wo as readRevisions,
  Jo as readRole,
  Uo as readRoles,
  Go as readSettings,
  Lo as readShare,
  Wm as readShareInfo,
  _o as readShares,
  Bo as readSingleton,
  zo as readTranslation,
  qo as readTranslations,
  Ko as readUser,
  Xo as readUsers,
  ts as readWebhook,
  es as readWebhooks,
  j2 as realtime,
  M as refresh,
  fc as rest,
  Ps as schemaApply,
  As as schemaDiff,
  Es as schemaSnapshot,
  Gs as serverHealth,
  _s as serverInfo,
  Ms as serverPing,
  W as sleep,
  li as staticToken,
  Am as triggerFlow,
  Um as triggerOperation,
  ra as updateCollection,
  ea as updateComment,
  aa as updateDashboard,
  sa as updateDashboards,
  ca as updateField,
  pa as updateFile,
  na as updateFiles,
  ua as updateFlow,
  ha as updateFlows,
  la as updateFolder,
  Sa as updateFolders,
  Qa as updateItem,
  fa as updateItems,
  Za as updateMe,
  ba as updateNotification,
  ja as updateNotifications,
  Da as updateOperation,
  Ra as updateOperations,
  Pa as updatePanel,
  ga as updatePanels,
  Ia as updatePermission,
  Aa as updatePermissions,
  wa as updatePreset,
  Na as updatePresets,
  ka as updateRelation,
  $a as updateRole,
  Ja as updateRoles,
  Wa as updateSettings,
  Ha as updateShare,
  La as updateShares,
  Ma as updateSingleton,
  Va as updateTranslation,
  za as updateTranslations,
  Ya as updateUser,
  Ka as updateUsers,
  rm as updateWebhook,
  tm as updateWebhooks,
  pe as uploadFiles,
  Lm as utilitySort,
  Pm as utilsExport,
  vm as utilsImport,
  Nm as verifyHash,
  jc as withToken
};
//# sourceMappingURL=@directus_sdk.js.map
