import * as React from "react";
import { Item } from "../../../types";
import { Marker, Popup } from "leaflet";
declare type LeafletRef = {
    item: Item;
    marker: Marker;
    popup: Popup;
};
declare type UseLeafletRefsManagerResult = ReturnType<typeof useLeafletRefsManager>;
declare function useLeafletRefsManager(initialLeafletRefs: {}): {
    leafletRefs: Record<string, LeafletRef>;
    addMarker: (item: Item, marker: Marker) => void;
    addPopup: (item: Item, popup: Popup) => void;
};
export declare const LeafletRefsProvider: React.FunctionComponent<{
    initialLeafletRefs: {};
    children?: React.ReactNode;
}>;
export declare const useLeafletRefs: () => Record<string, LeafletRef>;
export declare const useAddMarker: () => UseLeafletRefsManagerResult["addMarker"];
export declare const useAddPopup: () => UseLeafletRefsManagerResult["addPopup"];
export {};
