import * as React from "react";
import { LayerProps, Tag } from "../../../types";
declare type UseFilterManagerResult = ReturnType<typeof useFilterManager>;
declare function useFilterManager(initialTags: Tag[]): {
    filterTags: Tag[];
    searchPhrase: string;
    visibleLayers: LayerProps[];
    addFilterTag: (tag: Tag) => void;
    removeFilterTag: (id: string) => void;
    resetFilterTags: () => void;
    setSearchPhrase: (phrase: string) => void;
    addVisibleLayer: (layer: LayerProps) => void;
    toggleVisibleLayer: (layer: LayerProps) => void;
    resetVisibleLayers: () => void;
    isLayerVisible: (layer: LayerProps) => boolean;
};
export declare const FilterProvider: React.FunctionComponent<{
    initialTags: Tag[];
    children?: React.ReactNode;
}>;
export declare const useFilterTags: () => Tag[];
export declare const useAddFilterTag: () => UseFilterManagerResult["addFilterTag"];
export declare const useRemoveFilterTag: () => UseFilterManagerResult["removeFilterTag"];
export declare const useResetFilterTags: () => UseFilterManagerResult["resetFilterTags"];
export declare const useSearchPhrase: () => UseFilterManagerResult["searchPhrase"];
export declare const useSetSearchPhrase: () => UseFilterManagerResult["setSearchPhrase"];
export declare const useVisibleLayer: () => UseFilterManagerResult["visibleLayers"];
export declare const useAddVisibleLayer: () => UseFilterManagerResult["addVisibleLayer"];
export declare const useToggleVisibleLayer: () => UseFilterManagerResult["toggleVisibleLayer"];
export declare const useResetVisibleLayers: () => UseFilterManagerResult["resetVisibleLayers"];
export declare const useIsLayerVisible: () => UseFilterManagerResult["isLayerVisible"];
export {};
