import * as React from "react";
import { Item, LayerProps } from "../../../types";
declare type UseItemManagerResult = ReturnType<typeof useItemsManager>;
declare function useItemsManager(initialItems: Item[]): {
    items: Item[];
    addItem: (item: Item) => void;
    updateItem: (item: Item) => void;
    removeItem: (item: Item) => void;
    resetItems: (layer: LayerProps) => void;
    setItemsApi: (layer: LayerProps) => void;
    setItemsData: (layer: LayerProps) => void;
};
export declare const ItemsProvider: React.FunctionComponent<{
    initialItems: Item[];
    children?: React.ReactNode;
}>;
export declare const useItems: () => Item[];
export declare const useAddItem: () => UseItemManagerResult["addItem"];
export declare const useUpdateItem: () => UseItemManagerResult["updateItem"];
export declare const useRemoveItem: () => UseItemManagerResult["removeItem"];
export declare const useResetItems: () => UseItemManagerResult["resetItems"];
export declare const useSetItemsApi: () => UseItemManagerResult["setItemsApi"];
export declare const useSetItemsData: () => UseItemManagerResult["setItemsData"];
export {};
